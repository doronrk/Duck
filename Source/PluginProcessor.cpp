/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
DuckProcessor::DuckProcessor():
    triggerNoteNum(-1),
    gainFactor(1.0)
{
}

DuckProcessor::~DuckProcessor()
{
}

//==============================================================================
const String DuckProcessor::getName() const
{
    return JucePlugin_Name;
}

int DuckProcessor::getNumParameters()
{
    return 0;
}

float DuckProcessor::getParameter (int index)
{
    return 0.0f;
}

void DuckProcessor::setParameter (int index, float newValue)
{
}

const String DuckProcessor::getParameterName (int index)
{
    return String();
}

const String DuckProcessor::getParameterText (int index)
{
    return String();
}

const String DuckProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String DuckProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool DuckProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool DuckProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool DuckProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool DuckProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool DuckProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double DuckProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int DuckProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int DuckProcessor::getCurrentProgram()
{
    return 0;
}

void DuckProcessor::setCurrentProgram (int index)
{
}

const String DuckProcessor::getProgramName (int index)
{
    return String();
}

void DuckProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void DuckProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void DuckProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void DuckProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    std::cout << "gainFactor = " << String(gainFactor) << "\n";
    
    // clear extra channels
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // process audio
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        
        // ..do something to the data...
    }
    
    // iterate through MIDI
    int cursor = 0;
    int numSamplesLeft = buffer.getNumSamples();
    MidiBuffer::Iterator midiIterator (midiMessages);
    midiIterator.setNextSamplePosition (cursor);
    MidiMessage m (0xf4, 0.0);
    
    while (numSamplesLeft > 0)
    {
        int midiEventPos;
        const bool eventExists = midiIterator.getNextEvent (m, midiEventPos);
        const int numSamplesThisIteration = eventExists ? midiEventPos - cursor : numSamplesLeft;
        if (eventExists)
        {
            handleMidiEvent(buffer, m, midiEventPos);
        }
        cursor += numSamplesThisIteration;
        numSamplesLeft -= numSamplesThisIteration;
    }
}

void DuckProcessor::handleMidiEvent(AudioSampleBuffer& buffer, MidiMessage m, int midiEventPos)
{
    if (m.isNoteOn())
    {
        int noteNum = m.getNoteNumber();
        if (noteNum == triggerNoteNum)
        {
            beginDuck(buffer, m, midiEventPos);
        }
    } else if (m.isNoteOff())
    {
        int noteNum = m.getNoteNumber();
        if (noteNum == triggerNoteNum)
        {
            endDuck(buffer, m, midiEventPos);
        }
    }
}

void DuckProcessor::beginDuck(AudioSampleBuffer& buffer, MidiMessage m, int midiEventPos)
{
    gainFactor = 0.0;
}

void DuckProcessor::endDuck(AudioSampleBuffer& buffer, MidiMessage m, int midiEventPos)
{
    gainFactor = 1.0;
}


//==============================================================================
bool DuckProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* DuckProcessor::createEditor()
{
    return new DuckEditor (*this);
}

//==============================================================================
void DuckProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void DuckProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new DuckProcessor();
}

// Begin my methods

void DuckProcessor::setTriggerNoteNum(int noteNum)
{
    triggerNoteNum = noteNum;
}
